/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast = head;
        ListNode slow = head;

       for(int i=0; i<n; i++) {
           fast = fast.next;
       }

        // If fast == null then we need to return the head->next of the 
        if(fast == null) return head.next;

        while(fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }
        // delete the n.ode:
        ListNode temp = slow.next;
        slow.next = slow.next.next;
        temp = null;

   

        // If fastp becomes null, the Nth node from the end is the head
        

        // Move both pointers until fastp reaches the end
    
        return head;

      
    }
}
